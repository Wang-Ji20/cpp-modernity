Concurrency

task & threads
  one thread perform one task
  task may be function or function objects
  thread t {f}
  t.join() waits the thread to terminate
  jthread type: use RAII to ensure join
  arguments: function, varaidic templates, reference use ref(); function object by constructor

sharing data
  mutex m;
  scoped_lock lck {m}; // acquire lock, can acquire multiple locks
  shared_lock lck {mx}; // reader lock, allows multiple reads
  unique_lock lck {mx}; // writer lock, exclusive
  
  atomics variable. no data race on the variable
  
Waiting for events
  condition_variable
  void consumer()
  {
    while(true) {
    unique_lock lck {mmutex};                           // acquire mmutex
    mcond.wait(lck,[] { return !mqueue.empty(); });     // release mmutex and wait;
                                                        // re-acquire mmutex upon wakeup
                                                        // don't wake up unless mqueue is non-empty
    auto m = mqueue.front();                            // get the message
    mqueue.pop();
    lck.unlock();                                       // release mmutex
    // ... process m ...
    }
  }

  void producer()
  {
    while(true) {
            Message m;
              // ... fill the message ...
            scoped_lock lck {mmutex};               // protect operations
            mqueue.push(m);
              mcond.notify_one();                          // notify
    }                                             // release mmutex (at end of scope)
  }

Communicating Tasks
  <future>
  1. future & promise
     get() -> future <-> value <-> promise <- set_value()
                                           <- set_exception()
  void f(promise<X>& px)   // a task: place the result in px
  {
      // ...
      try {
              X res;
                // ... compute a value for res ...
              px.set_value(res);
      }
      catch (...) { // oops: couldn't compute res
              px.set_exception(current_exception()); // pass the exception to the future's thread
      }
  }

  void g(future<X>& fx)            // a task: get the result from fx
  {
          // ...
          try {
                  X v = fx.get();   // if necessary, wait for the value to get computed
                  // ... use v ...
          }
          catch (...) {                // oops: someone couldn't compute v
                  // ... handle error ...
          }
  }
  // if exception should not handle by g, no try ... catch clause

  packaged_task
  double accum(vector<double>::iterator beg, vector<double>::iterator end, double init)
        // compute the sum of [beg:end) starting with the initial value init
  {
          return accumulate(&*beg,&*end,init);
  }

  double comp2(vector<double>& v)
  {
          packaged_task pt0 {accum};                                                  // package the task (i.e., accum)
          packaged_task pt1 {accum};

          future<double> f0 {pt0.get_future()};                                    // get hold of pt0's future
          future<double> f1 {pt1.get_future()};                                    // get hold of pt1's future

          double* first = &v[0];
          thread t1 {move(pt0),first,first+v.size()/2,0};                          // start a thread for pt0
          thread t2 {move(pt1),first+v.size()/2,first+v.size(),0};           // start a thread for pt1
          // ...

          return f0.get()+f1.get();                                                            // get the results
  }


  async()
  double comp4(vector<double>& v)
         // spawn many tasks if v is large enough
  {
          if (v.size()<10' 000)                 // is it worth using concurrency?
                  return accum(v.begin(),v.end(),0.0);

          auto v0 = &v[0];
          auto sz = v.size();

          auto f0 = async(accum,v0,v0+sz/4,0.0);                    // first quarter
          auto f1 = async(accum,v0+sz/4,v0+sz/2,0.0);           // second quarter
          auto f2 = async(accum,v0+sz/2,v0+sz*3/4,0.0);       // third quarter
          auto f3 = async(accum,v0+sz*3/4,v0+sz,0.0);          // fourth quarter

          return f0.get()+f1.get()+f2.get()+f3.get();  // collect and combine the results
  }

  Coroutines
  generator<long long> fib()         // generate Fibonacci numbers
  {
          long long a = 0;
          long long b = 1;
          while (a<b) {
                  auto next = a+b;
                  co_yield next;           // save state, return value, and wait
                  a = b;
                  b = next;
          }
          co_return 0;                      // a fib too far
  }

  void user(int max)
  {
          for (int i=0; i++<max;)
                  cout << fib() <<' ';
  }